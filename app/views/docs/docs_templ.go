// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.680
package docs

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"OmarFaruk-0x01/sms-trap/app/views/components"
	"OmarFaruk-0x01/sms-trap/app/views/components/core"
	"OmarFaruk-0x01/sms-trap/app/views/layouts"
	"fmt"
)

type DocsPageProps struct {
	InboxLayoutProps *layouts.InboxLayoutProps
	Port             string
}

func DocsPage(props *DocsPageProps) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
			if !templ_7745c5c3_IsBuffer {
				templ_7745c5c3_Buffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<section class=\"relative h-full overflow-y-auto\"><div class=\"sticky top-0 bg-white z-50\"><div class=\"px-6 py-4\"><h2 class=\"text-2xl font-bold text-gray-800\">API Documentation</h2><p class=\"text-sm `text-gray-600 mt-1\">Integrate SMS Trap in your application with this API.</p></div><hr class=\"border-gray-200\"></div><div class=\"px-6 py-8 space-y-8\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = apiDetails(props).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = apiEndpoints().Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = codeSamples(props).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div></section>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if !templ_7745c5c3_IsBuffer {
				_, templ_7745c5c3_Err = io.Copy(templ_7745c5c3_W, templ_7745c5c3_Buffer)
			}
			return templ_7745c5c3_Err
		})
		templ_7745c5c3_Err = layouts.InboxLayout(props.InboxLayoutProps).Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}

func apiDetails(d *DocsPageProps) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"bg-white shadow rounded-lg overflow-hidden\"><div class=\"px-6 py-4 border-b border-gray-200\"><h3 class=\"text-lg font-semibold text-gray-800\">API Details</h3></div><div class=\"px-6 py-4\"><table class=\"w-full text-sm text-left text-gray-500\"><tbody><tr class=\"border-b\"><th class=\"py-3 font-medium text-gray-900\">Host</th><td class=\"py-3\">localhost:")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 string
		templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(d.Port)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `app/views/docs/docs.templ`, Line: 46, Col: 41}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</td></tr><tr class=\"border-b\"><th class=\"py-3 font-medium text-gray-900\">Base URL</th><td class=\"py-3\">http://localhost:")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var5 string
		templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(d.Port)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `app/views/docs/docs.templ`, Line: 50, Col: 48}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("/api/v1</td></tr></tbody></table></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}

func apiEndpoints() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var6 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var6 == nil {
			templ_7745c5c3_Var6 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"bg-white shadow rounded-lg overflow-hidden\"><div class=\"px-6 py-4 border-b border-gray-200\"><h3 class=\"text-lg font-semibold text-gray-800\">API Endpoints</h3></div><div class=\"px-6 py-4 flex flex-col space-y-6\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = endpointCard("GET", "/trap", "Trap SMS", []endpointParams{
			endpointParams{
				label:       "phones[]",
				description: "List of phones",
			},
			endpointParams{
				label:       "message",
				description: "SMS message",
			},
			endpointParams{
				label:       "label",
				description: "Type of SMS (transactional/promotional)",
			},
		}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}

type endpointParams struct {
	label       string
	description string
}

func endpointCard(method string, path string, description string, params []endpointParams) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var7 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var7 == nil {
			templ_7745c5c3_Var7 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"border border-gray-200 rounded-md\"><div class=\"px-4 py-3 bg-gray-50 border-b border-gray-200 flex items-center justify-between\"><span class=\"font-mono text-sm font-semibold\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var8 string
		templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs(method)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `app/views/docs/docs.templ`, Line: 90, Col: 57}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var9 string
		templ_7745c5c3_Var9, templ_7745c5c3_Err = templ.JoinStringErrs(path)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `app/views/docs/docs.templ`, Line: 90, Col: 66}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var9))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</span> <span class=\"px-2 py-1 text-xs font-semibold text-white bg-blue-500 rounded-full\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var10 string
		templ_7745c5c3_Var10, templ_7745c5c3_Err = templ.JoinStringErrs(method)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `app/views/docs/docs.templ`, Line: 91, Col: 93}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var10))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</span></div><div class=\"px-4 py-3\"><p class=\"text-sm text-gray-600\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var11 string
		templ_7745c5c3_Var11, templ_7745c5c3_Err = templ.JoinStringErrs(description)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `app/views/docs/docs.templ`, Line: 94, Col: 49}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var11))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</p>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if len(params) > 0 {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"mt-3\"><h4 class=\"text-sm font-semibold text-gray-700\">Queries:</h4><ul class=\"mt-2 space-y-1\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			for _, param := range params {
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<li class=\"text-sm text-gray-600 flex items-center gap-2\"><code class=\"px-1 py-0.5 text-sm font-mono bg-gray-100 rounded\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var12 string
				templ_7745c5c3_Var12, templ_7745c5c3_Err = templ.JoinStringErrs(param.label)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `app/views/docs/docs.templ`, Line: 101, Col: 85}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var12))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</code> <span>-</span> <span>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var13 string
				templ_7745c5c3_Var13, templ_7745c5c3_Err = templ.JoinStringErrs(param.description)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `app/views/docs/docs.templ`, Line: 104, Col: 28}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var13))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</span></li>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</ul></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}

func codeSamples(d *DocsPageProps) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var14 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var14 == nil {
			templ_7745c5c3_Var14 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"bg-white shadow rounded-lg overflow-hidden\"><div class=\"px-6 py-4 border-b border-gray-200\"><h3 class=\"text-lg font-semibold text-gray-800\">Code Samples</h3></div><div class=\"px-6 py-4 space-y-6\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = core.Tabs(&core.TabsProps{
			TabItems: []*core.TabItemProps{
				&core.TabItemProps{
					Id:        "curl",
					ActiveTab: "",
					Label:     "cURL",
					Icon: func() templ.Component {
						return nil
					},
					Panel: func() templ.Component {
						return components.CodeBlock(curlExample(d.Port), "bash")
					},
				},
				&core.TabItemProps{
					Id:        "go",
					ActiveTab: "",
					Label:     "Go",
					Icon: func() templ.Component {
						return nil
					},
					Panel: func() templ.Component {
						return components.CodeBlock(goExample(d.Port), "go")
					},
				},
				&core.TabItemProps{
					Id:        "js",
					ActiveTab: "",
					Label:     "Javascript",
					Icon: func() templ.Component {
						return nil
					},
					Panel: func() templ.Component {
						return components.CodeBlock(javascriptExample(d.Port), "javascript")
					},
				},
				&core.TabItemProps{
					Id:        "python",
					ActiveTab: "",
					Label:     "Python",
					Icon: func() templ.Component {
						return nil
					},
					Panel: func() templ.Component {
						return components.CodeBlock(pythonFlaskExample(d.Port), "python")
					},
				},
				&core.TabItemProps{
					Id:        "ruby",
					ActiveTab: "",
					Label:     "Ruby",
					Icon: func() templ.Component {
						return nil
					},
					Panel: func() templ.Component {
						return components.CodeBlock(rubyExample(d.Port), "ruby")
					},
				},
				&core.TabItemProps{
					Id:        "php",
					ActiveTab: "",
					Label:     "PHP",
					Icon: func() templ.Component {
						return nil
					},
					Panel: func() templ.Component {
						return components.CodeBlock(phpExample(d.Port), "php")
					},
				},
			},
		}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}

func curlExample(port string) string {
	return fmt.Sprintf(`curl -X GET 'http://localhost:%s/api/v1/trap?phones[]=1234567890&phones[]=9876543210&message=Your+verification+code+is+123456&label=transactional'`, port)
}

func javascriptExample(port string) string {
	return fmt.Sprintf(`const axios = require('axios');

const url = 'http://localhost:%s/api/v1/trap';
const params = {
  phones: ['+1234567890', '+9876543210'],
  message: 'Your verification code is 123456',
  label: 'transactional'
};

axios.get(url, { params })
.then(response => {
  console.log('Response:', response.data);
})
.catch(error => {
  console.error('Error:', error);
});`, port)
}

func pythonFlaskExample(port string) string {
	return fmt.Sprintf(`from flask import Flask, request, jsonify
import requests

app = Flask(__name__)

@app.route('/send_sms', methods=['GET'])
def send_sms():
    url = 'http://localhost:%s/api/v1/trap'
    params = {
        'phones': ['+1234567890', '+9876543210'],
        'message': 'Your verification code is 123456',
        'label': 'transactional'
    }

    response = requests.get(url, params=params)
    return jsonify(response.json()), response.status_code

if __name__ == '__main__':
    app.run(debug=True)`, port)
}

func rubyExample(port string) string {
	return fmt.Sprintf(`require 'net/http'
require 'uri'

uri = URI('http://localhost:%s/api/v1/trap')
params = {
  phones: ['+1234567890', '+9876543210'],
  message: 'Your verification code is 123456',
  label: 'transactional'
}
uri.query = URI.encode_www_form(params)

response = Net::HTTP.get_response(uri)
puts "Response #{response.code} #{response.message}: #{response.body}"`, port)
}

func phpExample(port string) string {
	return fmt.Sprintf(`<?php
$url = 'http://localhost:%s/api/v1/trap';
$params = array(
    'phones' => array('+1234567890', '+9876543210'),
    'message' => 'Your verification code is 123456',
    'label' => 'transactional'
);

$url .= '?' . http_build_query($params);

$response = file_get_contents($url);

if ($response === FALSE) {
    // Handle error
} else {
    var_dump($response);
}
?>`, port)
}

func goExample(port string) string {
	return fmt.Sprintf(`package main

import (
    "fmt"
    "net/http"
    "net/url"
)

func main() {
    baseURL := "http://localhost:%s/api/v1/trap"

    params := url.Values{}
    params.Add("phones", "+1234567890")
    params.Add("phones", "+9876543210")
    params.Add("message", "Your verification code is 123456")
    params.Add("label", "transactional")

    url := baseURL + "?" + params.Encode()

    resp, err := http.Get(url)
    if err != nil {
        panic(err)
    }
    defer resp.Body.Close()

    fmt.Println("Response Status:", resp.Status)
}`, port)
}
