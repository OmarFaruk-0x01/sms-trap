// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.680
package layouts

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import "OmarFaruk-0x01/sms-trap/app/views/components/core"

func ReadyNotification() templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_ReadyNotification_2e0b`,
		Function: `function __templ_ReadyNotification_2e0b(){if (!("Notification" in window)) {
        // Check if the browser supports notifications
        alert("This browser does not support desktop notification");
    } else if (Notification.permission !== "denied") {
        Notification.requestPermission().then((permission) => {
            if (permission === "granted") {
                console.log("Notification permission granted");
            }else{
                alert('Without notification permission SMS Trap can\'t able to send browser notification.')
            }
        });
    }
}`,
		Call:       templ.SafeScript(`__templ_ReadyNotification_2e0b`),
		CallInline: templ.SafeScriptInline(`__templ_ReadyNotification_2e0b`),
	}
}

func RegisterAlpineStore() templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_RegisterAlpineStore_ad80`,
		Function: `function __templ_RegisterAlpineStore_ad80(){document.addEventListener('alpine:init', () => {
        Alpine.store('navbar', {
            on: true,
            toggle() {
                this.on = !this.on
            }
        })

        Alpine.store('phoneList', {
            phones: [],
            init(){

            }
        })

        Alpine.store('smsDetails', {
            sms: null,
            open: false,
            selectSms(sms) {
                this.sms = sms
                this.open = true
            },
            close(){
                this.open = false
                setTimeout(() => {
                    this.sms = null
                },300)
            }
        })
    })
}`,
		Call:       templ.SafeScript(`__templ_RegisterAlpineStore_ad80`),
		CallInline: templ.SafeScriptInline(`__templ_RegisterAlpineStore_ad80`),
	}
}

func ReadyWebSocket() templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_ReadyWebSocket_21b1`,
		Function: `function __templ_ReadyWebSocket_21b1(){var loc = window.location;
    var uri = 'ws:';

    if (loc.protocol === 'https:') {
      uri = 'wss:';
    }
    uri += '//' + loc.host;
    uri +=  '/ws/';

    ws = new WebSocket(uri)

    ws.onopen = function() {
      console.log('Connected')
    }

    ws.onmessage = function(evt) {
        data = JSON.parse(evt.data)
        if (data.trigger_notification) {
            const notification = new Notification(` + "`" + `New Sms Recived From ${data?.query?.phones?.join(', ')}` + "`" + `, {
                body: data?.query?.message,
            })
            notification.addEventListener('click', (ev) => {
                console.log(ev)
                window.parent.parent.focus();
                notification.close();
                window.parent.parent.location.reload();
            })
        }
    }
}`,
		Call:       templ.SafeScript(`__templ_ReadyWebSocket_21b1`),
		CallInline: templ.SafeScriptInline(`__templ_ReadyWebSocket_21b1`),
	}
}

func RootLayout() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Sms Trap</title><link rel=\"stylesheet\" href=\"/css/tippy.css\"><link rel=\"stylesheet\" href=\"/css/app.css\"><link rel=\"stylesheet\" href=\"/js/highlight/styles/nord.min.css\"><script src=\"/js/apexcharts.min.js\"></script><script src=\"/js/dayjs.min.js\"></script><script src=\"/js/axios.min.js\"></script><script src=\"/js/highlight/highlight.min.js\"></script><script src=\"/js/highlight/languages/go.min.js\"></script><script src=\"/js/highlight/languages/javascript.min.js\"></script><script src=\"/js/highlight/languages/php.min.js\"></script><script src=\"/js/highlight/languages/python.min.js\"></script><script src=\"/js/highlight/languages/ruby.min.js\"></script><script src=\"/js/highlight/languages/bash.min.js\"></script><script src=\"/js/relativeTime.js\"></script><script src=\"/js/utils.js\"></script><script>dayjs.extend(window.dayjs_plugin_relativeTime)</script><script defer src=\"/js/alpine-tooltip.min.js\"></script><script defer src=\"/js/alpinejs.min.js\"></script><script>hljs.highlightAll();</script><style>\n                body {\n                    font-family: 'Exo 2', sans-serif;\n                }\n\n                [x-cloak] {\n                    display: none;\n                }\n            </style>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = ReadyNotification().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = ReadyWebSocket().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = RegisterAlpineStore().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = core.Toaster().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</head><body class=\"exo-2-regular\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var1.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
